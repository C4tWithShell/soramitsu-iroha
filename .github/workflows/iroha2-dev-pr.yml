
name: I2::Dev::Tests

on:
  pull_request:
    branches: [iroha2-dev]
    paths:
      - '**.rs'
      - '**.json'
      - '**.toml'
      - '.github/workflows/**.yml'
  push:
    branches: [feature/DOPS-2901/i2-sonar-defectdojo]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CLIENT_CLI_DIR: "/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test"

jobs:
  # consistency:
  #   runs-on: [self-hosted, Linux, iroha2ci]
  #   container:
  #     image: hyperledger/iroha2-ci:nightly-2024-01-12
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Check genesis.json
  #       if: always()
  #       run: ./scripts/tests/consistency.sh genesis
  #     - name: Check client/config.json
  #       if: always()
  #       run: ./scripts/tests/consistency.sh client
  #     - name: Check peer/config.json
  #       if: always()
  #       run: ./scripts/tests/consistency.sh peer
  #     - name: Check schema.json
  #       if: always()
  #       run: ./scripts/tests/consistency.sh schema
  #     - name: Check Docker Compose configurations
  #       if: always()
  #       run: ./scripts/tests/consistency.sh docker-compose

  sonar_job:
    runs-on: self-hosted #[self-hosted, Linux, iroha2ci]
    container:
      image: bastos525/iroha2-ci:nightly-2024-01-12-jq
    steps:
      - uses: actions/checkout@v4
      # TODO Remove this step #2165
      # - name: Adjust toolchain
      #   run: |
      #     rustup component add llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
      # - name: Format
      #   run: cargo fmt --all -- --check
      - name: Lints without features
        if: always()
        run: cargo clippy --workspace --benches --tests --examples --no-default-features --quiet
      - name: Lints with all features enabled
        if: always()
        run: cargo clippy --workspace --benches --tests --examples --all-features --quiet --message-format=json &> clippy.json
      # - name: Documentation
      #   if: always()
      #   run: cargo doc --no-deps --quiet
      - name: grcov
        run: |
          cargo install grcov
          mold --run cargo test --all-features --workspace --no-fail-fast
        env:
          RUSTFLAGS: "-C instrument-coverage"
          LLVM_PROFILE_FILE: "iroha-%p-%m.profraw"
      # - name: Run tests, with coverage
      #   run: |
      #     mold --run cargo llvm-cov clean --workspace
      #     mold --run cargo llvm-cov --doc --no-report --all-features --workspace --no-fail-fast
      #     mold --run cargo llvm-cov --no-report --ignore-filename-regex main.rs --all-features --workspace --no-fail-fast
      - name: Generate lcov report
        if: always()
        run: |
          grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "**/main.rs" -o lcov.info
      - name: SonarQube Scan
        if: always()
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dcommunity.rust.clippy.reportPaths=clippy.json
            -Dcommunity.rust.lcov.reportPaths=lcov.info
      - name: DefectDojo
        if: always()
        id: defectdojo
        uses: C4tWithShell/defectdojo-action@1.0.1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          product_type: iroha2
          engagement: ${{ github.ref_name }}
          tools: '("Trivy Scan" "Github Vulnerability Scan")'
          sonar_projectKey: bastos525:soramitsu-iroha
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repository: ${{ github.repository }}
          product: ${{ github.repository }}
          environment: Test
          reports: '{"Github Vulnerability Scan": "github.json"}'
      - name: Show response
        if: always()
        run: |
          set -e
          printf '%s\n' '${{ steps.defectdojo.outputs.response }}'
      # - name: Sonarqube uploading
      #   shell: bash
      #   run: sonar-scanner -Dcommunity.rust.clippy.reportPaths=clippy.json -Dcommunity.rust.lcov.reportPaths=lcov.info -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      # - name: Upload coverage to coveralls.io
      #   uses: coverallsapp/github-action@v2
      #   with:
      #     file: lcov.info
      #     compare-ref: ${{ github.base_ref }}
      #     compare-sha: ${{ github.event.pull_request.base.sha}}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      # (Temporally) Add the parallel coverage upload to Codecov to compare the results with Coveralls
      # - name: Upload coverage to codecov.io
      #   uses: codecov/codecov-action@v3.1.4
      #   with:
      #     files: lcov.info
      #     commit_parent: ${{ github.event.pull_request.base.sha }}
      #     fail_ci_if_error: false

  # integration:
  #   runs-on: [self-hosted, Linux, iroha2ci]
  #   container:
  #     image: hyperledger/iroha2-ci:nightly-2024-01-12
  #   timeout-minutes: 30
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Run tests, with no-default-features
  #       run: |
  #         mold --run cargo test --test mod --no-default-features -- \
  #         integration:: --skip unstable_network

  # unstable:
  #   runs-on: [self-hosted, Linux, iroha2ci]
  #   container:
  #     image: hyperledger/iroha2-ci:nightly-2024-01-12
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Run tests
  #       run: mold --run cargo test -p iroha_client --tests --no-default-features unstable_network --quiet

  # Run the job to check that the docker containers are properly buildable
  pr-generator-build:
    # Job will only execute if the head of the pull request is a branch for PR-generator case
    if: startsWith(github.head_ref, 'iroha2-pr-deploy/')
    runs-on: [self-hosted, Linux, iroha2-dev-push]
    container:
      image: hyperledger/iroha2-ci:nightly-2024-01-12
    steps:
      - uses: actions/checkout@v4
      - name: Login to Soramitsu Harbor
        uses: docker/login-action@v3
        with:
          registry: docker.soramitsu.co.jp
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        if: always()
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Build and push iroha2:dev image
        uses: docker/build-push-action@v4
        if: always()
        with:
          push: true
          tags: docker.soramitsu.co.jp/iroha2/iroha2:dev-${{ github.event.pull_request.head.sha }}
          labels: commit=${{ github.sha }}
          build-args: TAG=dev
          file: Dockerfile
          # This context specification is required
          context: .

  # client-cli-tests:
  #   runs-on: [self-hosted, Linux, iroha2ci]
  #   container:
  #     image: hyperledger/iroha2-ci:nightly-2024-01-12
  #   timeout-minutes: 60
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Build binaries
  #       run: |
  #         cargo build --bin iroha_client_cli
  #         cargo build --bin kagami
  #         cargo build --bin iroha
  #     - name: Setup test Iroha 2 environment on the bare metal
  #       run: |
  #         ./scripts/test_env.py setup
  #     - name: Mark binaries as executable
  #       run: |
  #         chmod +x ${{ env.CLIENT_CLI_DIR }}
  #     - name: Install dependencies using Poetry
  #       working-directory: client_cli/pytests
  #       run: |
  #         poetry install
  #     - name: Run client cli tests
  #       working-directory: client_cli/pytests
  #       run: |
  #         poetry run pytest
  #     - name: Cleanup test environment
  #       run: |
  #         ./scripts/test_env.py cleanup
